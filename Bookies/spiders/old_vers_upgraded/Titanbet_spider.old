from scrapy.conf import settings
from scrapy.spider import Spider
from scrapy.selector import Selector
from Bookies.items import EventItem
from scrapy.http import Request
import datetime
import os
LOG_DIR = settings['LOG_DIR']

#since no bookie will list the year,we work
#with only month and date in the 12 -31 format
#so we'll standardise all formatting from books as %m %d
today = datetime.datetime.now() #datetime obj, will need str later with .strftime('%m %d')

#UK only, need VPN
class TitanbetSpider(Spider):
    name = "Titanbet"
    allowed_domains = ["titanbet.com"]
    start_urls=['http://sports.titanbet.com/en/football']
   
    #first get the league links
    def parse(self, response):
        sel = Selector(response)
        league_links =sel.xpath('//ul[@class="hierarchy"]/li[@class="expander expander-collapsed sport-FOOT"]/ul[@class="expander-content"]//li[@class="expander expander-collapsed"]/ul[@class="expander-content"]//li/a/@href').extract()
        for link in league_links:
             link = 'http://sports.titanbet.com'+link
             yield Request(link, callback=self.parse_Data)


    def parse_Data(self, response):

        print "[INFO %s]: \033[7m Going to parse data for URL: %s \033[0m" % (self.name,response.url[20:])	

        sel = Selector(response)
        
        eventSelection = sel.xpath('//div[@class="expander-content"]/div[@class="pager"]/table[@class="coupon coupon-horizontal pager-content coupon-scoreboard"]/tbody//tr')

        items = []
        for event in eventSelection:
               item = EventItem()
   
               time = event.xpath('td[@class="time coupon-scoreboard"]/div/span[@class="time"]/text()').extract()
               date = event.xpath('td[@class="time coupon-scoreboard"]/div/span[@class="date"]/text()').extract()

               # sel.xpath returns lists (even single item list)
               # thus necessary to format like this.
               time = [x.strip() for x in time]
               date = [x.strip() for x in date]
 
               if not date:
                    # Assume today (as often bookies miss date if event today)
                    date = [today.strftime('%m %d')]
               elif  "Tomorrow" in date:
                    tmoz = today + datetime.timedelta(days=1)
                    date = [tmoz.strftime('%m %d')]
               elif  "Today" in date:
                    date = [today.strftime('%m %d')]
               elif date != []:
                    # Standarise formatting frp, %d %b (09 Mar) to %m %d (09 03)
                    # convert to datetime obj first then back to desired str
                    date = [datetime.datetime.strptime(date[0], '%d %b').strftime('%m %d')]
               item['eventDate'] = date
               item['eventTime'] = time
               
               #remember this will be the name within a list
               team1 = event.xpath('td[4][@class="seln "]/div/button/span/span[@class="seln-name"]/span/text()').extract()
               team2 = event.xpath('td[6][@class="seln "]/div/button/span/span[@class="seln-name"]/span/text()').extract()
               if team1 and team2:
                   item['eventName'] = [team1[0]+' V '+team2[0]]

               item['odd1'] = event.xpath('td[4][@class="seln "]/div/button/span/span[@class="price frac"]/text()').extract()
               item['odd3'] = event.xpath('td[5][@class="seln seln_sort-D"]/div/button/span/span[@class="price frac"]/text()').extract() #our conv is odd3 is draw
               item['odd2'] = event.xpath('td[6][@class="seln "]/div/button/span/span[@class="price frac"]/text()').extract()

               items.append(item)  #only append if at least one odd found   

        return items



